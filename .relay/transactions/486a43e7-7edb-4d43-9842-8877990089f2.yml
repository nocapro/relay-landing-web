uuid: 486a43e7-7edb-4d43-9842-8877990089f2
projectId: relay-landing-web
createdAt: '2025-09-02T01:45:11.716Z'
linesAdded: 381
linesRemoved: 2
gitCommitMsg: 'feat: build complete landing page from copy'
promptSummary: >-
  I need you to build out a high-quality landing page for my CLI tool based on
  the provided markdown copy. Use the existing React/Vite/Tailwind/Shadcn
  boilerplate and make it look great for a portfolio.
reasoning:
  - >-
    ok, let's build this thing. dark mode, slick animations, hacker vibes. got
    it. i'll spin up the components, wire up the content, and make it look
    portfolio-ready.
  - >-
    first, i'll create a content file to keep the copy separate from the
    components. clean code is good code.
  - >-
    next, i'll create all the section components for the landing page. each will
    live in its own file under `src/components/landing/`.
  - now, let's assemble them in `LandingPage.tsx`.
  - >-
    the boilerplate is missing a 404 page component, which `App.tsx` imports.
    i'll create a minimal one to prevent build errors.
  - >-
    finally, let's update `vite.config.ts` to include all the new landing
    components in the manual chunk for better optimization.
  - ship it.
operations:
  - type: write
    path: src/content/landing.ts
    content: |-
      export const hero = {
        title: "Relaycode",
        subtitle: "A CLI tool that turns any LLM answer into real code—built by Arman for solo devs.",
      };

      export const showcase = {
        title: "One command, zero surprises",
        command: "relay watch",
        workflow: [
          "Copy the LLM’s patch",
          "Relaycode writes, tests, lints",
          "You approve or roll back",
        ],
        footer: "Nothing lands broken, nothing is hidden.",
      };

      export const problem = {
        title: "Why it exists",
        description: "I got tired of copy-pasting code, forgetting to add tests, and breaking main. Relaycode automates the boring parts while keeping me in full control.",
      };

      export const companion = {
        title: "Repomix companion",
        description: "Use **Repomix** to pack your entire repo into one AI-friendly file, then let **Relaycode** apply the edits exactly where they belong. No manual file juggling, no merge hell.",
      };

      export const install = {
        title: "Install & go",
        steps: [
          "bun install -g relaycode",
          "cd your-project && relay init",
        ],
      };

      export const webVersion = {
        title: "Want the web version?",
        description: "If you love this workflow, head to https://www.noca.pro for the full web app: same atomic safety, plus repo-wide visual Drag-and-Drop context, history, and rollback from any browser.",
        link: "https://www.noca.pro",
      };

      export const faq = {
        title: "FAQ",
        items: [
          {
            question: "Why not an agentic AI loop?",
            answer: "Agent loops are great until they decide to restructure your project at 2 a.m. Relaycode keeps the AI on a short leash: it can only change what you explicitly paste, nothing more. One clipboard copy, one atomic transaction, zero surprises.",
          },
          {
            question: "Does it abuse free LLM tiers?",
            answer: "No. The tool is built to help solo devs work faster, not to exploit anyone’s free tier. Use Google AI Studio (or any other LLM) within the limits they publish—Relaycode doesn’t batch, loop, or automate extra calls behind your back. One clipboard copy equals one human-triggered request, nothing more.",
          },
        ],
      };

      export const finalCta = {
        title: "Ship features, not chores.",
      };
    patchStrategy: replace
  - type: write
    path: src/components/landing/Header.tsx
    content: |-
      import { Button } from "@/components/ui/button";
      import { Github } from 'lucide-react';

      export function Header() {
        return (
          <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <div className="container flex h-14 items-center">
              <div className="mr-4 flex items-center">
                <span className="font-bold">Relaycode</span>
              </div>
              <div className="flex flex-1 items-center justify-end space-x-4">
                <nav className="flex items-center space-x-1">
                  <Button variant="ghost" size="icon" asChild>
                    <a href="https://github.com/arman-g/relaycode" target="_blank" rel="noreferrer" aria-label="GitHub Repository">
                      <Github className="h-5 w-5" />
                    </a>
                  </Button>
                  <Button asChild>
                    <a href="https://www.noca.pro" target="_blank" rel="noreferrer">
                      Get Web Version
                    </a>
                  </Button>
                </nav>
              </div>
            </div>
          </header>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Hero.tsx
    content: |-
      import { hero } from "@/content/landing";
      import { Button } from "@/components/ui/button";
      import { ArrowRight, Copy } from "lucide-react";
      import { AnimatedList } from "../ui/AnimatedList";

      export function Hero() {
        const copyToClipboard = () => {
          navigator.clipboard.writeText("bun install -g relaycode");
        };

        return (
          <section className="relative overflow-hidden">
            <div aria-hidden="true" className="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-20">
                <div className="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400"></div>
                <div className="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300"></div>
            </div>
            <div className="container relative mx-auto px-4 md:px-6 py-24 md:py-32 lg:py-40 text-center">
              <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold tracking-tighter mb-6 animate-fade-in">
                {hero.title}
              </h1>
              <div className="max-w-3xl mx-auto text-lg md:text-xl text-muted-foreground mb-10 animate-fade-in" style={{ animationDelay: '200ms' }}>
                <AnimatedList lines={[{ text: hero.subtitle }]} initialDelay={300} />
              </div>
              <div className="flex flex-col sm:flex-row items-center justify-center gap-4 animate-fade-in" style={{ animationDelay: '400ms' }}>
                <div className="code-block flex items-center gap-4">
                  <span className="text-muted-foreground">$</span>
                  <code>bun install -g relaycode</code>
                  <Button variant="ghost" size="icon" onClick={copyToClipboard}>
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
                <Button size="lg" asChild>
                  <a href="https://www.noca.pro" target="_blank" rel="noreferrer">
                    Try Web Version <ArrowRight className="ml-2 h-5 w-5" />
                  </a>
                </Button>
              </div>
              <p className="mt-4 text-sm text-muted-foreground animate-fade-in" style={{ animationDelay: '500ms' }}>
                Built by Arman for solo devs.
              </p>
            </div>
          </section>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Solution.tsx
    content: |-
      import { showcase } from "@/content/landing";
      import { CheckCircle2 } from "lucide-react";

      export function Solution() {
        return (
          <div className="text-center">
            <h2 className="text-3xl md:text-4xl font-bold tracking-tight">{showcase.title}</h2>
            <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">{showcase.footer}</p>
            <div className="mt-12 grid gap-8 md:grid-cols-3">
              {showcase.workflow.map((item, i) => (
                <div key={i} className="flex flex-col items-center p-6 bg-secondary/50 rounded-lg animate-slide-up" style={{ animationDelay: `${i * 150}ms`, animationFillMode: 'backwards' }}>
                  <CheckCircle2 className="h-8 w-8 mb-4 text-primary" />
                  <p className="font-medium text-center">{item}</p>
                </div>
              ))}
            </div>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Demo.tsx
    content: |-
      import { AnimatedList } from "../ui/AnimatedList";

      export function Demo() {
        const lines = [
          { text: "$ relay watch", muted: false },
          { text: "Watching for clipboard changes...", muted: true },
          { text: "✓ Patch detected. Applying...", muted: false },
          { text: "✓ Running tests...", muted: false },
          { text: "✓ Linting files...", muted: false },
          { text: "✨ All checks passed. Ready for review.", muted: false },
        ];
        return (
          <div className="text-center">
            <div className="relative code-block max-w-2xl mx-auto p-6 glow-border">
              <div className="absolute -top-3 -left-3 w-3 h-3 bg-primary rounded-full animate-ping"></div>
              <div className="absolute -top-3 -left-3 w-3 h-3 bg-primary rounded-full"></div>
              <div className="font-mono text-left">
                <AnimatedList lines={lines} initialDelay={200} />
              </div>
              <div className="absolute top-4 right-4 text-xs text-muted-foreground">LIVE</div>
            </div>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Problem.tsx
    content: |-
      import { problem } from "@/content/landing";
      import { Card, CardContent } from "../ui/card";

      export function Problem() {
        return (
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-3xl md:text-4xl font-bold tracking-tight">{problem.title}</h2>
            <div className="mt-8">
              <Card className="bg-background/50 border-border/50 text-left">
                  <CardContent className="pt-6">
                    <blockquote className="text-lg md:text-xl text-muted-foreground leading-relaxed">
                      "{problem.description}"
                    </blockquote>
                  </CardContent>
              </Card>
            </div>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Roadmap.tsx
    content: |-
      import { companion } from "@/content/landing";
      import { GitMerge } from "lucide-react";

      export function Roadmap() {
        return (
          <div className="grid md:grid-cols-2 gap-12 items-center">
            <div className="text-center md:text-left">
              <div className="inline-block bg-secondary text-secondary-foreground py-1 px-3 rounded-lg mb-4 text-sm font-medium">
                Companion Tool
              </div>
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">{companion.title}</h2>
              <p className="mt-4 text-lg text-muted-foreground" dangerouslySetInnerHTML={{ __html: companion.description.replace(/\*\*(.*?)\*\*/g, '<strong class="text-foreground">$1</strong>') }} />
            </div>
            <div className="flex justify-center">
              <div className="relative w-64 h-64 flex items-center justify-center">
                <div className="absolute w-full h-full border-2 border-dashed border-border/50 rounded-full animate-spin [animation-duration:20s]"></div>
                <GitMerge className="h-24 w-24 text-primary opacity-50" />
                <div className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-1/2 p-3 bg-secondary rounded-lg shadow-lg text-sm">Repomix</div>
                <div className="absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-1/2 p-3 bg-secondary rounded-lg shadow-lg text-sm">Relaycode</div>
                <div className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-1/2 p-3 bg-secondary rounded-lg shadow-lg text-sm">LLM</div>
                <div className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-1/2 p-3 bg-secondary rounded-lg shadow-lg text-sm">Your Repo</div>
              </div>
            </div>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/WhoFor.tsx
    content: |-
      import { User } from "lucide-react";

      export function WhoFor() {
        return (
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-6">
              <User className="w-8 h-8 text-primary" />
            </div>
            <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Built for Solo Devs</h2>
            <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
              Relaycode is designed for the individual developer, consultant, or small team founder who moves fast and can't afford to get bogged down by tedious workflows.
            </p>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/FAQ.tsx
    content: |-
      import { faq } from "@/content/landing";
      import {
        Accordion,
        AccordionContent,
        AccordionItem,
        AccordionTrigger,
      } from "@/components/ui/accordion";

      export function FAQ() {
        return (
          <div className="max-w-3xl mx-auto">
            <h2 className="text-3xl md:text-4xl font-bold tracking-tight text-center mb-10">{faq.title}</h2>
            <Accordion type="single" collapsible className="w-full">
              {faq.items.map((item, i) => (
                <AccordionItem value={`item-${i}`} key={i}>
                  <AccordionTrigger className="text-left">{item.question}</AccordionTrigger>
                  <AccordionContent className="text-muted-foreground">
                    {item.answer}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/CTA.tsx
    content: >-
      import { install, webVersion } from "@/content/landing";

      import { Button } from "../ui/button";

      import { Copy, ExternalLink } from "lucide-react";

      import { Card, CardContent, CardDescription, CardHeader, CardTitle } from
      "../ui/card";


      export function CTA() {
        const copyToClipboard = (text: string) => {
          navigator.clipboard.writeText(text);
        };

        return (
          <div className="grid lg:grid-cols-2 gap-8 items-start">
            <div className="text-center lg:text-left">
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">{install.title}</h2>
              <div className="mt-8 space-y-4">
                {install.steps.map((step, i) => (
                  <div key={i} className="code-block flex items-center justify-between gap-4">
                    <span className="text-muted-foreground">$</span>
                    <code className="flex-1 text-left">{step}</code>
                    <Button variant="ghost" size="icon" onClick={() => copyToClipboard(step)}>
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
            <Card className="bg-secondary/50 border-blue-500/30">
              <CardHeader>
                <CardTitle>{webVersion.title}</CardTitle>
                <CardDescription>{webVersion.description}</CardDescription>
              </CardHeader>
              <CardContent>
                <Button asChild className="w-full">
                  <a href={webVersion.link} target="_blank" rel="noreferrer">
                    Visit noca.pro <ExternalLink className="ml-2 h-4 w-4" />
                  </a>
                </Button>
              </CardContent>
            </Card>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/landing/Footer.tsx
    content: |-
      import { finalCta } from "@/content/landing";

      export function Footer() {
        return (
          <footer className="border-t border-border/40">
            <div className="container flex flex-col items-center justify-between gap-4 py-10 md:h-24 md:flex-row md:py-0">
              <div className="flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0">
                <p className="text-center text-2xl font-bold leading-loose md:text-left glow-text">
                  {finalCta.title}
                </p>
              </div>
              <p className="text-center text-sm text-muted-foreground">
                © {new Date().getFullYear()} Relaycode. Built by Arman.
              </p>
            </div>
          </footer>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/pages/LandingPage.tsx
    content: |-
      import { Hero } from "@/components/landing/Hero";
      import { Problem } from "@/components/landing/Problem";
      import { Solution } from "@/components/landing/Solution";
      import { Demo } from "@/components/landing/Demo";
      import { Roadmap } from "@/components/landing/Roadmap";
      import { WhoFor } from "@/components/landing/WhoFor";
      import { CTA } from "@/components/landing/CTA";
      import { FAQ } from "@/components/landing/FAQ";
      import { Footer } from "@/components/landing/Footer";
      import { Header } from "@/components/landing/Header";

      // A wrapper for consistent spacing and centering
      const Section = ({ children }: { children: React.ReactNode }) => (
        <section className="container mx-auto px-4 md:px-6 py-16 md:py-24 lg:py-32">
          {children}
        </section>
      );

      export function LandingPage() {
        return (
          <div className="flex flex-col min-h-screen bg-background text-foreground antialiased">
            <Header />
            <main className="flex-grow">
              <Hero />
              
              {/* Features & Demo */}
              <Section><Solution /></Section>
              <Section><Demo /></Section>
              
              {/* The Why */}
              <div className="bg-secondary/30"><Section><Problem /></Section></div>
              
              {/* Companion Tool & Audience */}
              <Section><Roadmap /></Section>
              <div className="bg-secondary/30"><Section><WhoFor /></Section></div>
              
              {/* FAQ & Final CTA */}
              <Section><FAQ /></Section>
              <div className="bg-gradient-to-t from-blue-900/20 to-transparent">
                <Section><CTA /></Section>
              </div>
            </main>
            <Footer />
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/pages/NotFoundPage.tsx
    content: |-
      import { Link } from 'react-router-dom';
      import { Button } from '@/components/ui/button';

      export function NotFoundPage() {
        return (
          <div className="flex flex-col items-center justify-center min-h-screen text-center p-4">
            <h1 className="text-6xl font-bold glow-text">404</h1>
            <p className="mt-4 text-xl text-muted-foreground">Page Not Found.</p>
            <p className="mt-2 text-muted-foreground">Looks like you've ventured into the void.</p>
            <Button asChild className="mt-8">
              <Link to="/">Return to Safety</Link>
            </Button>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: vite.config.ts
    content: |-
      --- vite.config.ts
      +++ vite.config.ts
      @@ -26,13 +26,16 @@
                   'tailwind-merge'
                 ],
                 // Landing page components (lazy loaded)
                 'landing-components': [
      +            './src/components/landing/Header.tsx',
                   './src/components/landing/Hero.tsx',
                   './src/components/landing/Problem.tsx',
                   './src/components/landing/Solution.tsx',
                   './src/components/landing/Demo.tsx',
                   './src/components/landing/Roadmap.tsx',
                   './src/components/landing/WhoFor.tsx',
      -            './src/components/landing/CTA.tsx'
      +            './src/components/landing/FAQ.tsx',
      +            './src/components/landing/CTA.tsx',
      +            './src/components/landing/Footer.tsx'
                 ]
               },
               // Optimize chunk naming
    patchStrategy: new-unified
snapshot:
  src/content/landing.ts: null
  src/components/landing/Header.tsx: null
  src/components/landing/Demo.tsx: null
  src/components/landing/Problem.tsx: null
  src/components/landing/Hero.tsx: null
  src/components/landing/Solution.tsx: null
  src/components/landing/Roadmap.tsx: null
  src/components/landing/WhoFor.tsx: null
  src/components/landing/FAQ.tsx: null
  src/components/landing/CTA.tsx: null
  src/components/landing/Footer.tsx: null
  src/pages/LandingPage.tsx: |
    //TODO
  src/pages/NotFoundPage.tsx: ''
  vite.config.ts: |-
    import { defineConfig } from 'vite'
    import react from '@vitejs/plugin-react'

    export default defineConfig({
      plugins: [react()],
      server: {
        port: 3000,
        host: true
      },
      build: {
        // Enable minification
        minify: 'terser',
        terserOptions: {
          compress: {
            drop_console: true,
            drop_debugger: true,
          },
        },
        // Optimize chunk size
        chunkSizeWarningLimit: 1000,
        rollupOptions: {
          output: {
            manualChunks: {
              // Vendor chunks
              'vendor-react': ['react', 'react-dom'],
              'vendor-firebase': [
                'firebase/app',
                'firebase/auth', 
                'firebase/firestore',
                'firebase/analytics'
              ],
              'vendor-ui': [
                '@radix-ui/react-accordion',
                'lucide-react',
                'clsx',
                'tailwind-merge'
              ],
              // Landing page components (lazy loaded)
              'landing-components': [
                './src/components/landing/Hero.tsx',
                './src/components/landing/Problem.tsx',
                './src/components/landing/Solution.tsx',
                './src/components/landing/Demo.tsx',
                './src/components/landing/Roadmap.tsx',
                './src/components/landing/WhoFor.tsx',
                './src/components/landing/CTA.tsx'
              ]
            },
            // Optimize chunk naming
            chunkFileNames: (chunkInfo) => {
              const facadeModuleId = chunkInfo.facadeModuleId
                ? chunkInfo.facadeModuleId.split('/').pop()?.replace('.tsx', '').replace('.ts', '')
                : 'chunk'
              return `assets/[name]-[hash].js`
            },
            // Optimize asset naming
            assetFileNames: 'assets/[name]-[hash].[ext]'
          }
        },
        // Enable source maps for production debugging (optional)
        sourcemap: false,
        // Optimize CSS
        cssCodeSplit: true,
        // Enable tree shaking
        target: 'esnext'
      },
      // Optimize dependencies
      optimizeDeps: {
        include: [
          'react',
          'react-dom',
          'firebase/app',
          'firebase/auth',
          'firebase/firestore'
        ],
        exclude: ['firebase/analytics'] // Analytics can be loaded on demand
      }
    })
approved: true
